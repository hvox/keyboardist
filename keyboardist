#!/usr/bin/env python3
"""
Generate different keyboard things.

Usage: {script} PATH [options]

Arguments:
    PATH           Path to layout config file.

Options:
   -h, --help         Show this screen and exit.
   --to-xcb PATH      Generate XCB layout configuration.
   --to-utf PATH     Generate pretty unicode-art of the layout.
   --reset-to-qwerty  Reset config file to the QWERTY layout.
   --verbose          Raise verbosity level.
"""
import sys
from pathlib import Path
from typing import Any, Callable
from dataclasses import dataclass
from itertools import zip_longest
from string import ascii_letters, digits

debug: Callable[..., None]
noop: Any = lambda *args, **kwargs: None
MODIFIERS = ["Shift", "Mod1", "Mod2"]
PHYSICAL_ROWS = [
    ["TLDE", "AE01", "AE02", "AE03", "AE04", "AE05", "AE06", "AE07", "AE08", "AE09", "AE10", "AE11", "AE12", "BKSP"],
    ["TAB", "AD01", "AD02", "AD03", "AD04", "AD05", "AD06", "AD07", "AD08", "AD09", "AD10", "AD11", "AD12", "BKSL"],
    ["CAPS", "AC01", "AC02", "AC03", "AC04", "AC05", "AC06", "AC07", "AC08", "AC09", "AC10", "AC11", "RTRN"],
    ["LFSH", "AB01", "AB02", "AB03", "AB04", "AB05", "AB06", "AB07", "AB08", "AB09", "AB10", "RTSH"],
]
ROW_SIZES = [14, 14, 13, 12]
CHARNAMES = {
    **{char: char for char in ascii_letters + digits},
    **{"Back": "BackSpace"},
    **{x: x for x in "Tab Caps Enter Shift".split()},
    **{f"Mod{i}": f"ISO_Level{2*i+1}_Shift" for i in (1, 2)},
    "$": "dollar",
    "&": "ampersand",
    "'": "apostrophe",
    "^": "asciicircum",
    "~": "asciitilde",
    "*": "asterisk",
    "@": "at",
    "\\": "backslash",
    "|": "bar",
    "{": "braceleft",
    "}": "braceright",
    "[": "bracketleft",
    "]": "bracketright",
    ":": "colon",
    ",": "comma",
    "=": "equal",
    "!": "exclam",
    "`": "grave",
    ">": "greater",
    "<": "less",
    "-": "minus",
    "#": "numbersign",
    "(": "parenleft",
    ")": "parenright",
    "%": "percent",
    ".": "period",
    "+": "plus",
    "?": "question",
    '"': "quotedbl",
    ";": "semicolon",
    "/": "slash",
    "_": "underscore",
}


def str_to_mods(string: str):
    if string == "No modifiers":
        return 0
    return sum(2 ** MODIFIERS.index(mod.strip()) for mod in string.split("&"))


def mods_to_str(mods: int):
    if mods == 0:
        return "No modifiers"
    return " & ".join(reversed([MODIFIERS[i] for i, x in enumerate(reversed(bin(mods)[2:])) if x == "1"]))


@dataclass
class Layout:
    name: str
    characters: list[list[list[str]]]

    @staticmethod
    def from_config(config: str):
        lines = (line.strip() for line in config.split("\n"))
        lines = [line for line in lines if line and not line.startswith("#")]
        lines = list(reversed(lines))
        characters = [None] * 8
        name = lines.pop()
        while lines:
            mod = str_to_mods(lines.pop().strip())
            rows = [lines.pop().split() for _ in range(4)]
            assert list(map(len, rows)) == ROW_SIZES
            characters[mod] = rows
        assert not any(rows is None for rows in characters[:2])
        for i, rows in enumerate(characters):
            characters[i] = rows or [list(row) for row in characters[i % 2]]
        return Layout(name, characters)

    def to_config(self):
        modes = list(self.characters)
        if modes[0:2] == modes[4:6] == modes[6:8]:
            modes = modes[0:4]
            if modes[0:2] == modes[2:4]:
                modes = modes[0:2]
        config = [self.name, ""]
        for i, rows in enumerate(modes):
            config.extend([""] * (i > 0) + [mods_to_str(i)])
            for i, row in enumerate(rows):
                row_str = " ".join(char.rjust(2) if i else char.ljust(2) for i, char in enumerate(row[:-1]))
                row_str += " " + row[-1].rjust(43 - len(row_str))
                config.append("  " + row_str)
        return "\n".join(config) + "\n"

    def to_utf(self):
        chars = self.characters
        rows = []
        for i, row_size in enumerate(ROW_SIZES):
            edges = (0, row_size - 1)
            for shift in reversed(range(2)):
                row = []
                for j in range(row_size):
                    width = 5 + 2 * i * (j == 0) if j + 1 < row_size else 91 - 2 * i - 6 * row_size
                    if chars[shift][i][j] == chars[2 + shift][i][j]:
                        char = chars[shift][i][j]
                    else:
                        char = chars[shift][i][j] + " " + chars[2 + shift][i][j]
                    row.append(
                        char.center(width)
                        if len(char) == 1 or j not in edges
                        else char.rjust(min(width, len(char) + 1)).ljust(width)
                        if j == 0
                        else char.ljust(min(width, len(char) + 1)).rjust(width)
                    )
                    if not shift and rows and row[j] == rows[-1][j]:
                        row[j] = " " * len(row[j])
                rows.append(row)
        last_row = [
            *[" Ctrl ", " Fn ", " Super ", " Alt "],
            " " * 13 + "Space" + " " * 13,
            *[" Alt ", " Lang ", " Menu ", "  Ctrl "],
        ]
        rows.append(last_row)
        rows.append([" " * len(x) for x in rows[-1]])
        rows = ["│" + "│".join(row) + "│" for row in rows] + [""]
        utf = ["┌" + "".join("─┬"[down == "│"] for down in rows[0][1:-1]) + "┐"]
        for i in range(0, len(rows) - 1, 2):
            row1, row2 = rows[i: i + 2]
            row3 = ("─┴┬┼"[(up == "│") + 2 * (down == "│")] for up, down in zip_longest(row2[1:-1], rows[i + 2][1:-1]))
            utf.extend([row1, row2])
            utf.append("├└"[i + 3 == len(rows)] + "".join(row3) + "┤┘"[i + 3 == len(rows)])
        return "\n".join(utf) + "\n"

    def to_xcb(self):
        modes = list(self.characters)
        if modes[0:2] == modes[4:6] == modes[6:8]:
            modes = modes[0:4]
            if modes[0:2] == modes[2:4]:
                modes = modes[0:2]
        xcb = ["// This XCB-thing is generated by keyboardist"]
        xcb.append("default partial alphanumeric_keys modifier_keys")
        xcb.append('xkb_symbols "basic" {')
        xcb.append(f"    name[Group1] = {quote(self.name)};")
        for i, codes in enumerate(PHYSICAL_ROWS):
            xcb.append("")
            for j, code in enumerate(codes):
                chars = [layer[i][j] for layer in modes]
                charnames = ", ".join(CHARNAMES.get(char) or ucode(char) for char in chars)
                xcb.append("    key <" + code + "> {[" + charnames + "]};")
        xcb.append("};")
        return "\n".join(xcb) + "\n"

    def __repr__(self):
        config = "\n" + self.to_config()
        return f"Layout.from_config({longquote(config)})"


def main(script_name: str, *script_args: str):
    global debug
    doc = __doc__.format(script=Path(script_name).name)
    args = __import__("docopt").docopt(doc, script_args)
    debug = print if args["--verbose"] else noop
    debug(f"Running with arguments {dict(args)!r}")
    layout_path = Path(args["PATH"])
    if args["--reset-to-qwerty"]:
        qwerty = """English (US)
            No modifiers
              `   1  2  3  4  5  6  7  8  9  0  -  =  Back
              Tab  q  w  e  r  t  y  u  i  o  p  [  ]   \\
              Caps  a  s  d  f  g  h  j  k  l  ;  '  Enter
              Shift  z  x  c  v  b  n  m  ,  .  /    Shift

            Shift
              ~   !  @  #  $  %  ^  &  *  (  )  _  +  Back
              Tab  Q  W  E  R  T  Y  U  I  O  P  {  }    |
              Caps  A  S  D  F  G  H  J  K  L  :  "  Enter
              Shift  Z  X  C  V  B  N  M  <  >  ?    Shift
        """
        layout = Layout.from_config(qwerty)
        layout_path.write_text(layout.to_config())
    else:
        layout = Layout.from_config(layout_path.read_text())
    if path := args["--to-utf"]:
        Path(path).write_text(layout.to_utf())
    if path := args["--to-xcb"]:
        Path(path).write_text(layout.to_xcb())


def longquote(string: str):
    ESCAPING = {"\\": "\\\\"}
    return '"""' + "".join(ESCAPING.get(char, char) for char in string) + '"""'


def quote(string: str):
    ESCAPING = {"\\": "\\\\", "\t": "\\t", "\n": "\\n", "\r": "\\r", '"': '\\"'}
    return '"' + "".join(ESCAPING.get(char, char) for char in string) + '"'


def ucode(char: str):
    print("ucode:", char)
    code = bin(ord(char))[2:].upper()
    return f"U{code}"


if __name__ == "__main__":
    main(*sys.argv)
